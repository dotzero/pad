// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"sync"
)

// encoderMock is a mock implementation of encoder.
//
// 	func TestSomethingThatUsesencoder(t *testing.T) {
//
// 		// make and configure a mocked encoder
// 		mockedencoder := &encoderMock{
// 			EncodeFunc: func(num int64) string {
// 				panic("mock out the Encode method")
// 			},
// 		}
//
// 		// use mockedencoder in code that requires encoder
// 		// and then make assertions.
//
// 	}
type encoderMock struct {
	// EncodeFunc mocks the Encode method.
	EncodeFunc func(num int64) string

	// calls tracks calls to the methods.
	calls struct {
		// Encode holds details about calls to the Encode method.
		Encode []struct {
			// Num is the num argument value.
			Num int64
		}
	}
	lockEncode sync.RWMutex
}

// Encode calls EncodeFunc.
func (mock *encoderMock) Encode(num int64) string {
	if mock.EncodeFunc == nil {
		panic("encoderMock.EncodeFunc: method is nil but encoder.Encode was just called")
	}
	callInfo := struct {
		Num int64
	}{
		Num: num,
	}
	mock.lockEncode.Lock()
	mock.calls.Encode = append(mock.calls.Encode, callInfo)
	mock.lockEncode.Unlock()
	return mock.EncodeFunc(num)
}

// EncodeCalls gets all the calls that were made to Encode.
// Check the length with:
//     len(mockedencoder.EncodeCalls())
func (mock *encoderMock) EncodeCalls() []struct {
	Num int64
} {
	var calls []struct {
		Num int64
	}
	mock.lockEncode.RLock()
	calls = mock.calls.Encode
	mock.lockEncode.RUnlock()
	return calls
}

// storageMock is a mock implementation of storage.
//
// 	func TestSomethingThatUsesstorage(t *testing.T) {
//
// 		// make and configure a mocked storage
// 		mockedstorage := &storageMock{
// 			GetFunc: func(name string) (string, error) {
// 				panic("mock out the Get method")
// 			},
// 			NextCounterFunc: func() (uint64, error) {
// 				panic("mock out the NextCounter method")
// 			},
// 			SetFunc: func(name string, value string) error {
// 				panic("mock out the Set method")
// 			},
// 		}
//
// 		// use mockedstorage in code that requires storage
// 		// and then make assertions.
//
// 	}
type storageMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(name string) (string, error)

	// NextCounterFunc mocks the NextCounter method.
	NextCounterFunc func() (uint64, error)

	// SetFunc mocks the Set method.
	SetFunc func(name string, value string) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
		}
		// NextCounter holds details about calls to the NextCounter method.
		NextCounter []struct {
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Name is the name argument value.
			Name string
			// Value is the value argument value.
			Value string
		}
	}
	lockGet         sync.RWMutex
	lockNextCounter sync.RWMutex
	lockSet         sync.RWMutex
}

// Get calls GetFunc.
func (mock *storageMock) Get(name string) (string, error) {
	if mock.GetFunc == nil {
		panic("storageMock.GetFunc: method is nil but storage.Get was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedstorage.GetCalls())
func (mock *storageMock) GetCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// NextCounter calls NextCounterFunc.
func (mock *storageMock) NextCounter() (uint64, error) {
	if mock.NextCounterFunc == nil {
		panic("storageMock.NextCounterFunc: method is nil but storage.NextCounter was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNextCounter.Lock()
	mock.calls.NextCounter = append(mock.calls.NextCounter, callInfo)
	mock.lockNextCounter.Unlock()
	return mock.NextCounterFunc()
}

// NextCounterCalls gets all the calls that were made to NextCounter.
// Check the length with:
//     len(mockedstorage.NextCounterCalls())
func (mock *storageMock) NextCounterCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNextCounter.RLock()
	calls = mock.calls.NextCounter
	mock.lockNextCounter.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *storageMock) Set(name string, value string) error {
	if mock.SetFunc == nil {
		panic("storageMock.SetFunc: method is nil but storage.Set was just called")
	}
	callInfo := struct {
		Name  string
		Value string
	}{
		Name:  name,
		Value: value,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(name, value)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedstorage.SetCalls())
func (mock *storageMock) SetCalls() []struct {
	Name  string
	Value string
} {
	var calls []struct {
		Name  string
		Value string
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}
